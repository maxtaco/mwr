// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var Runner, a_json_parse, fs, iced, iutils, make_esc, parse_args, read, semver, spawn, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  semver = require('semver');

  iutils = require('iced-utils');

  spawn = iutils.spawn.spawn;

  a_json_parse = iutils.util.a_json_parse;

  parse_args = require('minimist');

  read = require('read');

  make_esc = require('iced-error').make_esc;

  fs = require('fs');

  Runner = (function() {
    function Runner() {
      this._key = null;
      this._old_version = null;
      this._new_version = null;
      this._name = null;
      this._filename = "./package.json";
    }

    Runner.prototype.parse_args = function(cb) {
      this.argv = parse_args(process.argv.slice(2), {
        alias: {
          k: ["key"],
          f: ["force"],
          i: ["inc"]
        },
        boolean: ["f"],
        string: ["i"]
      });
      return cb(null);
    };

    Runner.prototype.read_pkg = function(cb) {
      var esc, raw, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Runner::read_pkg");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner.read_pkg"
          });
          fs.readFile(_this._filename, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return raw = arguments[0];
              };
            })(),
            lineno: 38
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/release/src/main.iced",
              funcname: "Runner.read_pkg"
            });
            a_json_parse(raw, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1._pkg = arguments[0];
                };
              })(_this),
              lineno: 39
            })));
            __iced_deferrals._fulfill();
          })(function() {
            _this._name = _this._pkg.name;
            _this._old_version = semver.parse(_this._pkg.version);
            _this._new_version = semver.parse(_this._pkg.version).inc(_this.argv.inc || "patch");
            _this._new_version_s = _this._new_version.toString();
            return cb(null);
          });
        };
      })(this));
    };

    Runner.prototype.write_new_pkg = function(cb) {
      var err, json, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this._pkg.version = this._new_version_s;
      json = JSON.stringify(this._pkg, null, "  ");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner.write_new_pkg"
          });
          fs.writeFile(_this._filename, json, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 51
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Runner.prototype.select_key = function(cb) {
      var err, _ref, _ref1;
      err = null;
      this._key = !this.argv.key || this.argv.key.length === 0 ? null : (_ref = this.argv.key) === "1" || _ref === "keybase" || _ref === "kb" || _ref === "code" ? "code@keybase.io" : (_ref1 = this.argv.key) === "2" || _ref1 === "themax" || _ref1 === "max" || _ref1 === "me" || _ref1 === "gmail" ? "themax@gmail.com" : (err = new Error("don't recognize this key: " + this.argv.key), null);
      return cb(err);
    };

    Runner.prototype.commit = function(cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = ["commit", "-m", this._new_version_s, this._filename];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner.commit"
          });
          _this._git(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 75
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Runner.prototype.tag = function(cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = ["tag", "-a", "-m", this._new_version_s];
      if (this._key) {
        args.push("-u", this._key);
      }
      args.push(this._new_version_s);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner.tag"
          });
          _this._git(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 89
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Runner.prototype.verify = function(cb) {
      var args, err, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log("About to publish:\n  * " + this._name + "\n  * Old version: " + (this._old_version.toString()) + "\n  * New version: " + (this._new_version.toString()) + "\n  * Signing key: " + this._key);
      args = {
        prompt: "Are you sure? [Y/n] "
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner.verify"
          });
          read(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 104
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          err = err != null ? err : (_ref = res.toLowerCase()) === "y" || _ref === "yes" ? null : new Error("operation canceled!");
          return cb(err);
        };
      })(this));
    };

    Runner.prototype.publish = function(cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = ["publish"];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner.publish"
          });
          _this._npm(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 114
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Runner.prototype._git = function(args, cb) {
      var err, opts, rc, s, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      opts = {
        interp: "git"
      };
      s = args.join(" ");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner._git"
          });
          spawn(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return rc = arguments[0];
              };
            })(),
            lineno: 122
          }), opts);
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          err = rc !== 0 ? new Error("git " + s + ": bad exit: " + rc) : null;
          return cb(err);
        };
      })(this));
    };

    Runner.prototype._npm = function(args, cb) {
      var err, opts, rc, s, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      opts = {
        interp: "npm"
      };
      s = args.join(" ");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner._npm"
          });
          spawn(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return rc = arguments[0];
              };
            })(),
            lineno: 131
          }), opts);
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          err = rc !== 0 ? new Error("npm " + s + ": bad exit: " + rc) : null;
          return cb(err);
        };
      })(this));
    };

    Runner.prototype.main = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Runner::main");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/release/src/main.iced",
            funcname: "Runner.main"
          });
          _this.parse_args(esc(__iced_deferrals.defer({
            lineno: 139
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/release/src/main.iced",
              funcname: "Runner.main"
            });
            _this.read_pkg(esc(__iced_deferrals.defer({
              lineno: 140
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/release/src/main.iced",
                funcname: "Runner.main"
              });
              _this.select_key(esc(__iced_deferrals.defer({
                lineno: 141
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (!_this.argv.f) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/release/src/main.iced",
                      funcname: "Runner.main"
                    });
                    _this.verify(esc(__iced_deferrals.defer({
                      lineno: 142
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/release/src/main.iced",
                    funcname: "Runner.main"
                  });
                  _this.write_new_pkg(esc(__iced_deferrals.defer({
                    lineno: 143
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/release/src/main.iced",
                      funcname: "Runner.main"
                    });
                    _this.commit(esc(__iced_deferrals.defer({
                      lineno: 144
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/release/src/main.iced",
                        funcname: "Runner.main"
                      });
                      _this.tag(esc(__iced_deferrals.defer({
                        lineno: 145
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/release/src/main.iced",
                          funcname: "Runner.main"
                        });
                        _this.publish(esc(__iced_deferrals.defer({
                          lineno: 146
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        return cb(null);
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    return Runner;

  })();

  exports.run = function() {
    var err, r, rc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    r = new Runner();
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/release/src/main.iced",
          funcname: "run"
        });
        r.main(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 153
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (typeof err !== "undefined" && err !== null) {
          console.log("Error: " + err.message);
          rc = -2;
        } else {
          rc = 0;
        }
        return process.exit(rc);
      };
    })(this));
  };

}).call(this);
